[{"D:\\AcademicPerformance\\src\\index.js":"1","D:\\AcademicPerformance\\src\\App.js":"2","D:\\AcademicPerformance\\src\\reportWebVitals.js":"3","D:\\AcademicPerformance\\src\\screens\\Login.js":"4","D:\\AcademicPerformance\\src\\screens\\Student.js":"5","D:\\AcademicPerformance\\src\\screens\\Teacher.js":"6","D:\\AcademicPerformance\\src\\screens\\Admin.js":"7","D:\\AcademicPerformance\\src\\screens\\Chart.js":"8","D:\\AcademicPerformance\\src\\screens\\Info.js":"9","D:\\AcademicPerformance\\src\\screens\\Remarks.js":"10","D:\\AcademicPerformance\\src\\screens\\Title.js":"11"},{"size":649,"mtime":1607285000806,"results":"12","hashOfConfig":"13"},{"size":2539,"mtime":1608018597712,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1607186834808,"results":"15","hashOfConfig":"13"},{"size":6067,"mtime":1608018955695,"results":"16","hashOfConfig":"13"},{"size":11598,"mtime":1608018162761,"results":"17","hashOfConfig":"13"},{"size":19162,"mtime":1608017980818,"results":"18","hashOfConfig":"13"},{"size":34062,"mtime":1608018080170,"results":"19","hashOfConfig":"13"},{"size":1251,"mtime":1607457115174,"results":"20","hashOfConfig":"13"},{"size":2317,"mtime":1608017341002,"results":"21","hashOfConfig":"13"},{"size":1248,"mtime":1607624376614,"results":"22","hashOfConfig":"13"},{"size":367,"mtime":1607287685383,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"3jbt2b",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\AcademicPerformance\\src\\index.js",[],["51","52"],"D:\\AcademicPerformance\\src\\App.js",["53"],"import React, { useEffect, useState } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport Login from './screens/Login';\r\nimport Admin from './screens/Admin';\r\nimport Student from './screens/Student';\r\nimport Teacher from './screens/Teacher';\r\nimport create from 'zustand';\r\n\r\nexport const useStore = create(set => ({\r\n  user: null,\r\n  signIn: (user) => set({user}),\r\n  signOut: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('firstName');\r\n    localStorage.removeItem('lastName');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('kind');\r\n    set({user: null});\r\n  },\r\n  fetch: () => {\r\n    const token = localStorage.getItem('token');\r\n    const firstName = localStorage.getItem('firstName');\r\n    const lastName = localStorage.getItem('lastName');\r\n    const username = localStorage.getItem('username');\r\n    const kind = localStorage.getItem('kind');\r\n    set({user: {token, firstName, lastName, username, kind}});\r\n  }\r\n}))\r\n\r\nexport default function App() {\r\n    const fetch = useStore(state => state.fetch);\r\n    useEffect(() => fetch());\r\n    return (\r\n      <div className=\"h-100\">\r\n        <Switch>\r\n          <LoginRoute path=\"/\" exact>\r\n            <Login/>\r\n          </LoginRoute>\r\n           <PrivateRoute path=\"/student\" kind=\"student\">\r\n              <Student />\r\n            </PrivateRoute>\r\n           <PrivateRoute path=\"/admin\" kind=\"admin\">\r\n              <Admin />\r\n            </PrivateRoute>\r\n           <PrivateRoute path=\"/teacher\" kind=\"teacher\">\r\n              <Teacher />\r\n            </PrivateRoute>\r\n        </Switch>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction PrivateRoute({ children, kind, ...rest }) {\r\n  const user = useStore(state => state.user);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        user != null && user.kind === kind ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction LoginRoute({ children, ...rest }) {\r\n  const user = useStore(state => state.user);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        user === null || user.kind === null ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/\" + user.kind,\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n","D:\\AcademicPerformance\\src\\reportWebVitals.js",[],"D:\\AcademicPerformance\\src\\screens\\Login.js",["54","55"],"D:\\AcademicPerformance\\src\\screens\\Student.js",["56"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport SettingsPower from '@material-ui/icons/SettingsPower';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport Chart from './Chart';\r\nimport Info from './Info';\r\nimport Remarks from './Remarks';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {useStore} from '../App';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"/\">\r\n                Performance Monitor\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 36,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(12),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 360,\r\n    },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [open, setOpen] = useState(true);\r\n    const [data, setData] = useState({});\r\n    const [reports, setReports] = useState([]);\r\n    const [display, setDisplay] = useState([]);\r\n    const [comments, setComments] = useState([]);\r\n    const [visible, setVisible] = useState(true);\r\n    const user = useStore(useCallback(state => state.user, []));\r\n    const signOut = useStore(state => state.signOut);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n    const filter = (mode) => {\r\n        const newDisplay = reports.filter(report => mode === 'Mixed' || report.title.split(' ')[0] === mode);\r\n        setDisplay(newDisplay);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const {token} = user;\r\n        axios.get('http://localhost:8080/api/users/info/student', {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                console.log(response.data.payload);\r\n                setData(response.data.payload);\r\n                axios.get('http://localhost:8080/api/reports/student/' + response.data.payload.studentId, {\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                })\r\n                    .then(response => {\r\n                        setReports(response.data.payload);\r\n                        setDisplay(response.data.payload);\r\n                    }).catch(err => console.log(err));\r\n                axios.get('http://localhost:8080/api/comments/' + response.data.payload.studentId, {\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                })\r\n                    .then(response => {\r\n                        setComments(response.data.payload);\r\n                    }).catch(err => console.log(err));\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={visible}\r\n                autoHideDuration={6000}\r\n                onClose={() => setVisible(false)}\r\n                message={\"Logged In Successfully as \" + user.username}\r\n                action={\r\n                    <React.Fragment>\r\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setVisible(false)}>\r\n                            <CloseIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                }\r\n            />\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Student Dashboard\r\n          </Typography>\r\n                    <IconButton color=\"inherit\" onClick={() => {signOut();history.push('/')}} >\r\n                        <SettingsPower />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem button onClick={() => filter(\"Mixed\")}>\r\n                        <ListItemIcon>\r\n                            <AssignmentIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Mixed\" />\r\n                    </ListItem>\r\n                    <ListItem button onClick={() => filter(\"Weekly\")}>\r\n                        <ListItemIcon>\r\n                            <AssignmentIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Weekly\" />\r\n                    </ListItem>\r\n                    <ListItem button onClick={() => filter(\"Monthly\")}>\r\n                        <ListItemIcon>\r\n                            <AssignmentIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Monthly\" />\r\n                    </ListItem>\r\n                    <ListItem button onClick={() => filter(\"Yearly\")}>\r\n                        <ListItemIcon>\r\n                            <AssignmentIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Yearly\" />\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={8} lg={9}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                {display.length !== 0 && <Chart reports={display} />}\r\n                                {!display.length && <p className=\"text-center\"> No data for this criteria </p>}\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} lg={3}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Info studentId={data.studentId} dob={data.dob} year={data.year} address={data.address} />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Paper className={classes.paper}>\r\n                                {comments.length !== 0 && display.length !== 0 && <Remarks comments={comments} reports={display} />}\r\n                                {(!display.length || !comments.length) && <p className=\"text-center\"> No data for this criteria</p>}\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Box pt={4}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n}","D:\\AcademicPerformance\\src\\screens\\Teacher.js",["57"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport SettingsPower from '@material-ui/icons/SettingsPower';\r\nimport Info from './Info';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Title from './Title';\r\nimport {useStore} from '../App';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"/\">\r\n                Performance Monitor\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 36,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 550,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [studentId, setStudentId] = useState('');\r\n    const [subjectId, setSubjectId] = useState('');\r\n    const [comment, setComment] = useState('');\r\n    const [year, setYear] = useState('');\r\n    const [title1, setTitle1] = useState('');\r\n    const [title2, setTitle2] = useState('');\r\n    const [data, setData] = useState({});\r\n    const [subjects, setSubjects] = useState({});\r\n    const [obtainedMarks, setObtainedMarks] = useState('');\r\n    const [maximumMarks, setMaximumMarks] = useState('');\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n    const [open, setOpen] = useState(true);\r\n    const [showForm, setShowForm] = useState(true);\r\n\r\n    const user = useStore(useCallback(state => state.user, []));\r\n    const signOut = useStore(state => state.signOut);\r\n\r\n    const [message, setMessage] = useState('Logged In Successfully as ' + user.username);\r\n    const handleCreateReport = (event) => {\r\n        event.preventDefault();\r\n        const {token} = user;\r\n        axios.post('http://localhost:8080/api/reports/create', JSON.stringify({\r\n            studentId: studentId.toString(),\r\n            subjectId: subjectId.toString(),\r\n            year: year.toString(),\r\n            title: title1 + \" \" + title2,\r\n            obtainedMarks: obtainedMarks.toString(),\r\n            maximumMarks: maximumMarks.toString()\r\n        }), {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => {\r\n            if (response.data.payload != null && response.data.payload !== undefined) {\r\n                if (comment.length === 0) return;\r\n                axios.post('http://localhost:8080/api/comments/create', JSON.stringify({\r\n                    reportId: response.data.payload.toString(),\r\n                    description: comment.toString()\r\n                }), {\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                }).then(response => {\r\n                    setMessage('Report Generated Successfully');\r\n                    setOpen(true);\r\n                })\r\n                    .catch(err => {\r\n                        setMessage('Please Check Form Details');\r\n                        setOpen(true);\r\n                    })\r\n            }\r\n            else {\r\n                setMessage('Please Check Form Details');\r\n                setOpen(true);\r\n            }\r\n        })\r\n            .catch(err => {\r\n                setMessage('Please Check Form Details');\r\n                setOpen(true);\r\n            });\r\n    }\r\n    useEffect(() => {\r\n        const {token} = user;\r\n        axios.get('http://localhost:8080/api/users/info/teacher', {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                setData(response.data.payload)\r\n            })\r\n            .catch(function (error) {\r\n                setMessage('Error Occurred');\r\n                setOpen(true);\r\n            })\r\n            .then(() => {\r\n                axios.get('http://localhost:8080/api/users/info/teacher-subject', {\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + token,\r\n                        'Content-Type': 'application/json',\r\n                    }\r\n                })\r\n                    .then(response => {\r\n                        setSubjects(response.data.payload)\r\n                        if (response.data.payload.length > 0)\r\n                            setSubjectId(response.data.payload[0])\r\n                        else {\r\n                            setMessage('No Subject Assigned');\r\n                            setOpen(true);\r\n                            setShowForm(false);\r\n                        }\r\n                    })\r\n                    .catch(function (error) {\r\n                        setMessage('Error Occurred');\r\n                        setOpen(true);\r\n                    })\r\n            })\r\n    }, []);\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={() => setOpen(false)}\r\n                message={message}\r\n                action={\r\n                    <React.Fragment>\r\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setOpen(false)}>\r\n                            <CloseIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                }\r\n            />\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Teacher Dashboard\r\n          </Typography>\r\n                    <IconButton color=\"inherit\" onClick={() => {signOut();history.push('/')}} >\r\n                        <SettingsPower />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={8} lg={9}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                { showForm && <form className={classes.form} noValidate onSubmit={event => handleCreateReport(event)}>\r\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                                        <Grid item xs={4}>\r\n                                            <FormControl variant=\"filled\" className={classes.formControl}>\r\n                                                <InputLabel htmlFor=\"subjectId\">Subject Id</InputLabel>\r\n                                                <Select\r\n                                                    native\r\n                                                    fullWidth\r\n                                                    value={subjectId}\r\n                                                    onChange={event => setSubjectId(event.target.value)}\r\n                                                    inputProps={{\r\n                                                        name: 'subjectId',\r\n                                                        id: 'subjectId',\r\n                                                    }}\r\n                                                >\r\n                                                    {\r\n                                                        subjects.length && subjects.map(subjectId => <option value={subjectId}>{subjectId}</option>)\r\n                                                    }\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                id=\"studentId\"\r\n                                                fullWidth\r\n                                                label=\"Student Id\"\r\n                                                name=\"studentId\"\r\n                                                autoComplete=\"studentId\"\r\n                                                autoFocus\r\n                                                value={studentId}\r\n                                                onChange={event => setStudentId(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                name=\"year\"\r\n                                                label=\"Year\"\r\n                                                type=\"year\"\r\n                                                id=\"year\"\r\n                                                fullWidth\r\n                                                autoComplete=\"year\"\r\n                                                value={year}\r\n                                                onChange={event => setYear(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                                        <Grid item xs={3}>\r\n                                            <FormControl variant=\"filled\" className={classes.formControl}>\r\n                                                <InputLabel htmlFor=\"title1\">Type</InputLabel>\r\n                                                <Select\r\n                                                    native\r\n                                                    value={title1}\r\n                                                    onChange={event => setTitle1(event.target.value)}\r\n                                                    inputProps={{\r\n                                                        name: 'title1',\r\n                                                        id: 'title1',\r\n                                                    }}\r\n                                                >\r\n                                                    <option value=\"Weekly\">Weekly</option>\r\n                                                    <option value=\"Montly\">Monthly</option>\r\n                                                    <option value=\"Yearly\">Yearly</option>\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={9}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                fullWidth\r\n                                                required\r\n                                                name=\"title2\"\r\n                                                label=\"Report Title\"\r\n                                                id=\"title2\"\r\n                                                autoComplete=\"title2\"\r\n                                                value={title2}\r\n                                                onChange={event => setTitle2(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                fullWidth\r\n                                                id=\"obtainedMarks\"\r\n                                                label=\"Obtained Marks\"\r\n                                                name=\"obtainedMarks\"\r\n                                                autoComplete=\"obtainedMarks\"\r\n                                                autoFocus\r\n                                                value={obtainedMarks}\r\n                                                onChange={event => setObtainedMarks(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                fullWidth\r\n                                                name=\"maximumMarks\"\r\n                                                label=\"Maximum Marks\"\r\n                                                id=\"maximumMarks\"\r\n                                                autoComplete=\"maximumMarks\"\r\n                                                value={maximumMarks}\r\n                                                onChange={event => setMaximumMarks(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                                        <Grid item xs={12}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                name=\"comment\"\r\n                                                multiline\r\n                                                rows={4}\r\n                                                fullWidth\r\n                                                label=\"Remarks (Optional)\"\r\n                                                id=\"comment\"\r\n                                                autoComplete=\"comment\"\r\n                                                value={comment}\r\n                                                onChange={event => setComment(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        fullWidth\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.submit}\r\n                                    >\r\n                                        Generate Report\r\n                                    </Button>\r\n                                </form>}\r\n                                {!showForm && \r\n                                <Title>No subjects are assigned to you yet!</Title>}\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} lg={3}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Info teacherId={data.teacherId} userId={data.userId} />\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Box pt={4}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n","D:\\AcademicPerformance\\src\\screens\\Admin.js",["58"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport SettingsPower from '@material-ui/icons/SettingsPower';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport {useStore} from '../App';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"/\">\r\n                Performance Monitor\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 36,\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight1: {\r\n        height: 250,\r\n    },\r\n    fixedHeight: {\r\n        height: 550,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(12),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function Admin() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n    const fixedHeightPaper1 = clsx(classes.paper, classes.fixedHeight1);\r\n    const [name, setName] = useState('');\r\n    const [subjectId, setSubjectId] = useState('');\r\n    const [teacherId, setTeacherId] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [kind, setKind] = useState('teacher');\r\n    const [lastName, setLastName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [dob, setDob] = useState('');\r\n    const [year, setYear] = useState('');\r\n    const [open, setOpen] = useState(true);\r\n    const [drawer, setDrawer] = useState(true);\r\n    const [message, setMessage] = useState('Logged In Successfully as admin');\r\n    const [selected, setSelected] = useState(0);\r\n    const [tab, setTab] = useState('create');\r\n    const [teachers, setTeachers] = useState([]);\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [assigned, setAssigned] = useState([]);\r\n\r\n    const user = useStore(useCallback(state => state.user, []));\r\n    const signOut = useStore(state => state.signOut);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setDrawer(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setDrawer(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const {token} = user;\r\n        axios.get('http://localhost:8080/api/users/info/teachers', {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => {\r\n            console.log(response);\r\n            setTeachers(response.data.payload);\r\n        })\r\n            .catch(err => console.log(err));\r\n\r\n        axios.get('http://localhost:8080/api/subjects/info', {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => {\r\n            console.log(response);\r\n            setSubjects(response.data.payload);\r\n        })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n    const handleSubjectCreate = event => {\r\n        event.preventDefault();\r\n        const {token} = user;\r\n        axios.post('http://localhost:8080/api/subjects/add', JSON.stringify({\r\n            name: name.toString()\r\n        }), {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => {\r\n            console.log(response);\r\n            setMessage('Subject Generated Successfully');\r\n            setOpen(true);\r\n        })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setMessage('Please check form details');\r\n                setOpen(true);\r\n            })\r\n\r\n    }\r\n    const handleSubjectAssign = event => {\r\n        event.preventDefault();\r\n        const {token} = user;\r\n        axios.post('http://localhost:8080/api/subjects/assign', JSON.stringify({\r\n            subjectId: subjectId.toString(),\r\n            teacherId: teacherId.toString()\r\n        }), {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => {\r\n            console.log(response);\r\n            setMessage('Subject Assigned Successfully');\r\n            setOpen(true);\r\n        })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setMessage('Please check form details');\r\n                setOpen(true);\r\n            })\r\n    }\r\n\r\n    const handleShowAssigned = teacherId => {\r\n        const {token} = user;\r\n        axios.post('http://localhost:8080/api/users/info/teacher-subject', JSON.stringify({\r\n            teacherId: teacherId.toString()\r\n        }), {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                console.log(response);\r\n                setAssigned(response.data.payload)\r\n                setMessage('Assigned Subjects List Fetched!');\r\n                if(response.data.payload.length === 0) {\r\n                    setMessage('No subjects assigned to the requested teacher');\r\n                }\r\n                setOpen(true);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                setMessage('Error Occurred');\r\n                setOpen(true);\r\n            })\r\n    }\r\n    const handleUserCreate = event => {\r\n        event.preventDefault();\r\n        const {token} = user;\r\n        let data = {\r\n            firstName, lastName, kind, username, password: 'test123'\r\n        }\r\n        if (kind === 'student') {\r\n            data = { ...data, address, dob, year };\r\n        }\r\n        axios.post('http://localhost:8080/api/users/create', JSON.stringify(\r\n            data\r\n        ), {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + token,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }).then(response => {\r\n            console.log(response);\r\n            setMessage('User Generated Successfully');\r\n            setOpen(true);\r\n        })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setMessage('Please check form details');\r\n                setOpen(true);\r\n            })\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={() => setOpen(false)}\r\n                message={message}\r\n                action={\r\n                    <React.Fragment>\r\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setOpen(false)}>\r\n                            <CloseIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </React.Fragment>\r\n                }\r\n            />\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, drawer && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, drawer && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Student Dashboard\r\n          </Typography>\r\n                    <IconButton color=\"inherit\" onClick={() => {signOut(); history.push('/')}} >\r\n                        <SettingsPower />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !drawer && classes.drawerPaperClose),\r\n                }}\r\n                open={drawer}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem button onClick={() => { setSelected(0); setTab('create'); }} selected={selected === 0}>\r\n                        <ListItemIcon>\r\n                            <HomeIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Creation Panel\" />\r\n                    </ListItem>\r\n                    <ListItem button onClick={() => { setSelected(1); setTab('teachers'); }} selected={selected === 1}>\r\n                        <ListItemIcon>\r\n                            <AccountCircleIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Available Teachers\" />\r\n                    </ListItem>\r\n                    <ListItem button onClick={() => { setSelected(2); setTab('subjects'); }} selected={selected === 2}>\r\n                        <ListItemIcon>\r\n                            <SubjectIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Available Subjects\" />\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    {tab === 'create' && <Grid container spacing={3}>\r\n                        <Grid item xs={6}>\r\n                            <Paper className={fixedHeightPaper1}>\r\n                                <form className={classes.form} noValidate onSubmit={event => handleSubjectCreate(event)}>\r\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                                        <Grid item xs={12}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                id=\"name\"\r\n                                                fullWidth\r\n                                                label=\"Subject Name\"\r\n                                                name=\"name\"\r\n                                                autoComplete=\"name\"\r\n                                                autoFocus\r\n                                                value={name}\r\n                                                onChange={event => setName(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Button\r\n                                                type=\"submit\"\r\n                                                fullWidth\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.submit}\r\n                                            >\r\n                                                Create Subject\r\n                                    </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </form>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Paper className={fixedHeightPaper1}>\r\n                                <form className={classes.form} noValidate onSubmit={event => handleSubjectAssign(event)}>\r\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                id=\"subjectId\"\r\n                                                fullWidth\r\n                                                label=\"Subject Id\"\r\n                                                name=\"subjectId\"\r\n                                                autoComplete=\"subjectId\"\r\n                                                autoFocus\r\n                                                value={subjectId}\r\n                                                onChange={event => setSubjectId(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                id=\"teacherId\"\r\n                                                fullWidth\r\n                                                label=\"Teacher Id\"\r\n                                                name=\"teacherId\"\r\n                                                autoComplete=\"teacherId\"\r\n                                                autoFocus\r\n                                                value={teacherId}\r\n                                                onChange={event => setTeacherId(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Button\r\n                                                type=\"submit\"\r\n                                                fullWidth\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.submit}\r\n                                            >\r\n                                                Assign Subject\r\n                                    </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </form>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>}\r\n                    {tab === 'create' && <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <Paper className={classes.paper}>\r\n                                <form className={classes.form} noValidate onSubmit={event => handleUserCreate(event)}>\r\n                                    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                id=\"firstName\"\r\n                                                fullWidth\r\n                                                label=\"First Name\"\r\n                                                name=\"firstName\"\r\n                                                autoComplete=\"firstName\"\r\n                                                autoFocus\r\n                                                value={firstName}\r\n                                                onChange={event => setFirstName(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                id=\"lastName\"\r\n                                                fullWidth\r\n                                                label=\"Last Name\"\r\n                                                name=\"lastName\"\r\n                                                autoComplete=\"lastName\"\r\n                                                autoFocus\r\n                                                value={lastName}\r\n                                                onChange={event => setLastName(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <FormControl variant=\"filled\" className={classes.formControl}>\r\n                                                <InputLabel htmlFor=\"kind\">User Type</InputLabel>\r\n                                                <Select\r\n                                                    native\r\n                                                    fullWidth\r\n                                                    value={kind}\r\n                                                    onChange={event => setKind(event.target.value)}\r\n                                                    inputProps={{\r\n                                                        name: 'kind',\r\n                                                        id: 'kind',\r\n                                                    }}\r\n                                                >\r\n                                                    <option value=\"teacher\">Teacher</option>\r\n                                                    <option value=\"student\">Student</option>\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={8}>\r\n                                            <TextField\r\n                                                variant=\"outlined\"\r\n                                                margin=\"normal\"\r\n                                                required\r\n                                                id=\"username\"\r\n                                                fullWidth\r\n                                                label=\"Username\"\r\n                                                name=\"username\"\r\n                                                autoComplete=\"username\"\r\n                                                autoFocus\r\n                                                value={username}\r\n                                                onChange={event => setUsername(event.target.value)}\r\n                                            />\r\n                                        </Grid>\r\n                                        {\r\n                                            kind === 'student' &&\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    variant=\"outlined\"\r\n                                                    margin=\"normal\"\r\n                                                    required\r\n                                                    id=\"address\"\r\n                                                    fullWidth\r\n                                                    label=\"Address\"\r\n                                                    name=\"address\"\r\n                                                    autoComplete=\"address\"\r\n                                                    autoFocus\r\n                                                    value={address}\r\n                                                    onChange={event => setAddress(event.target.value)}\r\n                                                />\r\n                                            </Grid>\r\n                                        }\r\n                                        {\r\n                                            kind === 'student' &&\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    variant=\"outlined\"\r\n                                                    margin=\"normal\"\r\n                                                    required\r\n                                                    id=\"dob\"\r\n                                                    fullWidth\r\n                                                    label=\"Dob\"\r\n                                                    name=\"dob\"\r\n                                                    autoComplete=\"dob\"\r\n                                                    autoFocus\r\n                                                    value={dob}\r\n                                                    onChange={event => setDob(event.target.value)}\r\n                                                />\r\n                                            </Grid>\r\n                                        }\r\n                                        {\r\n                                            kind === 'student' &&\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    variant=\"outlined\"\r\n                                                    margin=\"normal\"\r\n                                                    required\r\n                                                    id=\"year\"\r\n                                                    fullWidth\r\n                                                    label=\"Year\"\r\n                                                    name=\"year\"\r\n                                                    autoComplete=\"year\"\r\n                                                    autoFocus\r\n                                                    value={year}\r\n                                                    onChange={event => setYear(event.target.value)}\r\n                                                />\r\n                                            </Grid>\r\n                                        }\r\n                                        <Grid item xs={6}>\r\n                                            <Button\r\n                                                type=\"submit\"\r\n                                                fullWidth\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.submit}\r\n                                            >\r\n                                                Create User\r\n                                    </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </form>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>}\r\n                    {tab === 'teachers' && <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n                        <Grid item xs={8}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Title>Teachers</Title>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>User Id</TableCell>\r\n                                            <TableCell>Teacher Id</TableCell>\r\n                                            <TableCell>Name</TableCell>\r\n                                            <TableCell>Assigned Subjects</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {teachers.map((teacher, idx) => {\r\n                                            return (\r\n                                                <TableRow key={idx}>\r\n                                                    <TableCell>{teacher.userId}</TableCell>\r\n                                                    <TableCell>{teacher.teacherId}</TableCell>\r\n                                                    <TableCell>{teacher.name}</TableCell>\r\n                                                    <TableCell>\r\n                                                        <Button\r\n                                                            color=\"primary\"\r\n                                                            onClick={() => handleShowAssigned(teacher.teacherId)}\r\n                                                        >\r\n                                                            View\r\n                                                        </Button>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Paper>\r\n                        </Grid>\r\n                        {\r\n                            assigned.length !== 0 && <Grid item xs={3}>\r\n                                <Paper>\r\n                                    <Grid container justify=\"center\" alignItems=\"center\">\r\n                                        <Grid item>\r\n                                            <Title>Assigned Subjects</Title>\r\n                                            <Table size=\"small\">\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Subject Id</TableCell>\r\n                                                        <TableCell>Name</TableCell>\r\n                                                    </TableRow>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {assigned.map((subjectId, idx) => {\r\n                                                        return (\r\n                                                            <TableRow key={idx}>\r\n                                                                <TableCell>{subjectId}</TableCell>\r\n                                                                <TableCell>{subjects.find(subject => subject.subjectId === subjectId).name}</TableCell>\r\n                                                            </TableRow>\r\n                                                        );\r\n                                                    })}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                    }\r\n                    {tab === 'subjects' && <Grid container spacing={3} justify=\"center\">\r\n                        <Grid item xs={6}>\r\n                            <Paper className={fixedHeightPaper}>\r\n                                <Title>Subjects</Title>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Subject Id</TableCell>\r\n                                            <TableCell>Name</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {subjects.map((subject, idx) => {\r\n                                            return (\r\n                                                <TableRow key={idx}>\r\n                                                    <TableCell>{subject.subjectId}</TableCell>\r\n                                                    <TableCell>{subject.name}</TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                    }\r\n                    <Box pt={4}>\r\n                        <Copyright />\r\n                    </Box>\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","D:\\AcademicPerformance\\src\\screens\\Chart.js",[],"D:\\AcademicPerformance\\src\\screens\\Info.js",[],"D:\\AcademicPerformance\\src\\screens\\Remarks.js",[],"D:\\AcademicPerformance\\src\\screens\\Title.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":28,"nodeType":"65","messageId":"66","endLine":1,"endColumn":36},{"ruleId":"63","severity":1,"message":"67","line":62,"column":11,"nodeType":"65","messageId":"66","endLine":62,"endColumn":16},{"ruleId":"68","severity":1,"message":"69","line":68,"column":8,"nodeType":"70","endLine":68,"endColumn":10,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":186,"column":8,"nodeType":"70","endLine":186,"endColumn":10,"suggestions":"73"},{"ruleId":"68","severity":1,"message":"72","line":200,"column":8,"nodeType":"70","endLine":200,"endColumn":10,"suggestions":"74"},{"ruleId":"68","severity":1,"message":"72","line":207,"column":8,"nodeType":"70","endLine":207,"endColumn":10,"suggestions":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'fetch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["79"],["80"],["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"84","fix":"86"},{"desc":"84","fix":"87"},"Update the dependencies array to be: [history, user]",{"range":"88","text":"89"},"Update the dependencies array to be: [user]",{"range":"90","text":"91"},{"range":"92","text":"91"},{"range":"93","text":"91"},[2223,2225],"[history, user]",[6493,6495],"[user]",[7213,7215],[7188,7190]]